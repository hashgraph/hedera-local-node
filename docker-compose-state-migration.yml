services:
  haveged:
    image: "${HAVEGED_IMAGE_PREFIX}network-node-haveged:${HAVEGED_IMAGE_TAG}"
    container_name: haveged
    restart: always
    mem_swappiness: 0
    privileged: true
    network_mode: none
    command: ["-d 16"]

  network-node:
    image: "${NETWORK_NODE_IMAGE_PREFIX}${NETWORK_NODE_IMAGE_NAME}:${NETWORK_NODE_IMAGE_TAG}"
    container_name: network-node
    user: root
    mem_swappiness: 0
    mem_limit: "${NETWORK_NODE_MEM_LIMIT}"
    memswap_limit: "${NETWORK_NODE_MEM_LIMIT}"
    environment:
      JAVA_HEAP_MIN: "${PLATFORM_JAVA_HEAP_MIN}"
      JAVA_HEAP_MAX: "${PLATFORM_JAVA_HEAP_MAX}"
      JAVA_OPTS: "${PLATFORM_JAVA_OPTS}"
    healthcheck:
      test:
        [
          "CMD",
          "grep",
          "-E",
          "Now current platform status = ACTIVE|Hedera - Hederanode#0 is ACTIVE",
          "/opt/hgcapp/services-hedera/HapiApp2.0/output/hgcaa.log"
        ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    depends_on:
      haveged:
        condition: service_started
      record-streams-uploader:
        condition: service_started
    networks:
      network-node-bridge:
        ipv4_address: 172.27.0.3
    ports:
      - "50211:50211"
      - "50212:50212"
      - "9999:9999"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/accountBalances:/opt/hgcapp/accountBalances"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams:/opt/hgcapp/recordStreams"
      - "${APPLICATION_CONFIG_PATH}:/opt/hgcapp/services-hedera/HapiApp2.0/data/config"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/logs:/opt/hgcapp/services-hedera/HapiApp2.0/output"
      - "${APPLICATION_ROOT_PATH}/data/keys:/opt/hgcapp/services-hedera/HapiApp2.0/data/keys"
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/stats:/opt/hgcapp/services-hedera/HapiApp2.0/data/stats"
      - "${APPLICATION_ROOT_PATH}/config.txt:/opt/hgcapp/services-hedera/HapiApp2.0/config.txt"
      - "${APPLICATION_ROOT_PATH}/settings.txt:/opt/hgcapp/services-hedera/HapiApp2.0/settings.txt"
      - "${APPLICATION_ROOT_PATH}/log4j2.xml:/opt/hgcapp/services-hedera/HapiApp2.0/log4j2.xml"
      - "${APPLICATION_ROOT_PATH}/hedera.crt:/opt/hgcapp/services-hedera/HapiApp2.0/hedera.crt"
      - "${APPLICATION_ROOT_PATH}/hedera.key:/opt/hgcapp/services-hedera/HapiApp2.0/hedera.key"
      - "${RECORD_PARSER_ROOT_PATH}:/opt/hgcapp/recordParser"

  record-streams-uploader:
    image: "${UPLOADER_IMAGE_PREFIX}uploader-mirror:${UPLOADER_IMAGE_TAG}"
    container_name: record-streams-uploader
    user: root
    restart: unless-stopped
    networks:
      - cloud-storage
    environment:
      DEBUG: "true"
      REAPER_ENABLE: "true"
      REAPER_MIN_KEEP: "1"
      REAPER_INTERVAL: "5"
      S3_ENABLE: "true"
      GCS_ENABLE: "false"
      SIG_REQUIRE: "true"
      SIG_PRIORITIZE: "true"
      SIG_EXTENSION: "rcd_sig"
      STREAM_EXTENSION: "${STREAM_EXTENSION}"
      BUCKET_NAME: "hedera-streams"
      BUCKET_PATH: "recordstreams/record0.0.3"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams/record0.0.3:/records"
    command:
      - /usr/bin/env
      - ${PYTHON_VERSION}
      - /usr/local/bin/mirror.py
      - --linux
      - --watch-directory
      - /records
      - --s3-endpoint
      - http://minio:9000
      - --debug

  account-balances-uploader:
    image: "${UPLOADER_IMAGE_PREFIX}uploader-mirror:${UPLOADER_IMAGE_TAG}"
    container_name: account-balances-uploader
    user: root
    restart: unless-stopped
    networks:
      - cloud-storage
    environment:
      DEBUG: "true"
      REAPER_ENABLE: "true"
      REAPER_MIN_KEEP: "1"
      REAPER_INTERVAL: "5"
      S3_ENABLE: "true"
      GCS_ENABLE: "false"
      SIG_REQUIRE: "true"
      SIG_PRIORITIZE: "true"
      SIG_EXTENSION: "pb_sig"
      STREAM_EXTENSION: "pb"
      BUCKET_NAME: "hedera-streams"
      BUCKET_PATH: "accountBalances/balance0.0.3"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/accountBalances/balance0.0.3:/balances"
    command:
      - /usr/bin/env
      - ${PYTHON_VERSION}
      - /usr/local/bin/mirror.py
      - --linux
      - --watch-directory
      - /balances
      - --s3-endpoint
      - http://minio:9000
      - --debug

  record-sidecar-uploader:
    image: "${UPLOADER_IMAGE_PREFIX}uploader-mirror:${UPLOADER_IMAGE_TAG}"
    container_name: record-sidecar-uploader
    user: root
    restart: unless-stopped
    networks:
      - cloud-storage
    environment:
      DEBUG: "true"
      REAPER_ENABLE: "true"
      REAPER_MIN_KEEP: "1"
      REAPER_INTERVAL: "5"
      S3_ENABLE: "true"
      GCS_ENABLE: "false"
      SIG_REQUIRE: "false"
      SIG_PRIORITIZE: "false"
      STREAM_EXTENSION: "rcd.gz"
      BUCKET_NAME: "hedera-streams"
      BUCKET_PATH: "recordstreams/record0.0.3/sidecar"
      S3_ACCESS_KEY: "minioadmin"
      S3_SECRET_KEY: "minioadmin"
    volumes:
      - "${NETWORK_NODE_LOGS_ROOT_PATH}/recordStreams/record0.0.3/sidecar:/sidecar-files"
    command:
      - /usr/bin/env
      - ${PYTHON_VERSION}
      - /usr/local/bin/mirror.py
      - --linux
      - --watch-directory
      - /sidecar-files
      - --s3-endpoint
      - http://minio:9000
      - --debug

networks:
  network-node-bridge:
    name: network-node-bridge
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.27.0.0/16
          ip_range: 172.27.0.0/24
          gateway: 172.27.0.254
  mirror-node:
    name: mirror-node
    driver: bridge
  cloud-storage:
    name: cloud-storage
    driver: bridge

volumes:
  mirror-node-postgres:
    name: mirror-node-postgres
  minio-data:
    name: minio-data
  prometheus-data:
    name: prometheus-data
  grafana-data:
    name: grafana-data
